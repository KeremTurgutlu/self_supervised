# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/10b-simclr_v2.ipynb (unless otherwise specified).

__all__ = ['create_simclrV2_model', 'SimCLRV2']

# Cell
from fastai.vision.all import *
from .augmentations import *
from .layers import *
from .simclr import *

# Cell
def create_simclrV2_model(encoder, n_in=3, hidden_size=256, projection_size=128):
    "Create SimCLR model"
    with torch.no_grad(): representation = encoder(torch.randn((2,n_in,128,128)))
    projector = create_mlp_module(representation.size(1), hidden_size, projection_size, nlayers=3)
    apply_init(projector)
    return SimCLRModel(encoder, projector)

# Cell
class SimCLRV2(Callback):
    order,run_valid = 9,True
    def __init__(self, size, aug_func=get_batch_augs, **aug_kwargs):
        self.aug1 = aug_func(size, **aug_kwargs)
        self.aug2 = aug_func(size, **aug_kwargs)
        print(self.aug1); print(self.aug2)

    def before_batch(self):
        xi,xj = self.aug1(self.x), self.aug2(self.x)
        self.learn.xb = (torch.cat([xi, xj]),)
        bs = self.learn.xb[0].shape[0]
        self.learn.yb = (torch.arange(bs, device=self.dls.device).roll(bs//2),)

    def show(self, n=1):
        bs = self.learn.x.size(0)//2
        x1,x2  = torch.split(self.learn.x, [bs,bs])
        idxs = np.random.choice(range(bs),n,False)
        x1 = self.aug1.decode(x1[idxs].to('cpu').clone()).clamp(0,1)
        x2 = self.aug2.decode(x2[idxs].to('cpu').clone()).clamp(0,1)
        images = []
        for i in range(n): images += [x1[i],x2[i]]
        show_images(images, nrows=n)